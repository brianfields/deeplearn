name: Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    # Service containers to run with `test`
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test_key" >> $GITHUB_ENV
        echo "PYTHONPATH=${{ github.workspace }}/backend/src" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV

    - name: Wait for PostgreSQL to be ready
      run: |
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "PostgreSQL is ready"
            break
          fi
          echo "Waiting for PostgreSQL... ($i/30)"
          sleep 2
        done

    - name: Run database migrations
      working-directory: ./backend
      run: |
        # Run Alembic migrations if they exist
        if [ -f "alembic.ini" ]; then
          python -m alembic upgrade head || echo "Migration failed or not needed"
        fi

    - name: Lint with flake8 (optional)
      working-directory: ./backend
      run: |
        # Install flake8 and run basic linting
        pip install flake8
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting issues found"
      continue-on-error: true

    - name: Run all backend tests (using local test runner)
      working-directory: ./backend
      run: |
        echo "ðŸ§ª Running all backend tests using local test runner..."
        python run_all_tests.py --verbose

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          backend/mcq-test-results.xml
          backend/all-test-results.xml
        retention-days: 30

    - name: Test Summary
      if: always()
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Python version: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- MCQ tests: âœ… Completed" >> $GITHUB_STEP_SUMMARY
        echo "- Backend tests: âœ… Completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check the test results artifacts for detailed information." >> $GITHUB_STEP_SUMMARY